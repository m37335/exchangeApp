# 旧ファイル名: api_optimization_implementation_plan_2025.yaml

# 🔧 API最適化実装計画（2025年8月版）
# YAML形式による構造化された実装計画

project:
  name: "API Optimization Implementation"
  version: "2025.8"
  description: "API制限問題解決とデータベース活用による最適化実装計画"
  based_on: "api_optimization_design_2025.md"

# 📊 現在の問題分析
current_issues:
  api_limitations:
    description: "API制限エラーの詳細"
    daily_calls: 171
    call_breakdown:
      integrated_ai_discord: "9回/実行 × 8回/日 = 72回"
      real_ai_discord_v2: "9回/実行 × 8回/日 = 72回"
      market_opens: "9回/実行 × 3回/日 = 27回"
    error_patterns:
      - "429 Too Many Requests"
      - "Rate limit exceeded"
      - "API quota exceeded"

  performance_issues:
    description: "パフォーマンス問題"
    response_time: "平均3-5秒"
    error_rate: "約15%"
    system_stability: "不安定"

# 🎯 解決目標
optimization_goals:
  api_reduction:
    target: "80%以上削減"
    current: 171
    target_calls: 30
    reduction_methods:
      database_cache: "60%削減"
      analysis_cache: "20%削減"
      batch_optimization: "10%削減"

  performance_improvement:
    response_time: "50%短縮"
    error_rate: "90%削減"
    system_stability: "大幅向上"

# 📁 実装ファイル構成
file_structure:
  new_directories:
    - path: "src/infrastructure/cache/"
      description: "キャッシュシステム"
      files:
        - "__init__.py"
        - "cache_manager.py"
        - "analysis_cache.py"
        - "file_cache.py"

    - path: "src/infrastructure/optimization/"
      description: "最適化システム"
      files:
        - "__init__.py"
        - "data_optimizer.py"
        - "api_rate_limiter.py"
        - "batch_processor.py"

    - path: "src/infrastructure/database/models/"
      description: "新規データベースモデル"
      files:
        - "analysis_cache_model.py"
        - "notification_history_model.py"
        - "api_call_history_model.py"

    - path: "src/infrastructure/database/repositories/"
      description: "新規リポジトリ"
      files:
        - "analysis_cache_repository_impl.py"
        - "notification_history_repository_impl.py"
        - "api_call_history_repository_impl.py"

    - path: "src/domain/entities/"
      description: "新規ドメインエンティティ"
      files:
        - "analysis_cache.py"
        - "notification_history.py"
        - "api_call_history.py"

    - path: "src/domain/repositories/"
      description: "新規ドメインリポジトリ"
      files:
        - "analysis_cache_repository.py"
        - "notification_history_repository.py"
        - "api_call_history_repository.py"

    - path: "src/utils/"
      description: "新規ユーティリティ"
      files:
        - "cache_utils.py"
        - "optimization_utils.py"

  modified_files:
    - path: "scripts/cron/integrated_ai_discord.py"
      description: "キャッシュ機能統合"
      changes:
        - "CacheManager統合"
        - "DataOptimizer統合"
        - "AnalysisCache統合"

    - path: "scripts/cron/real_ai_discord_v2.py"
      description: "キャッシュ機能統合"
      changes:
        - "CacheManager統合"
        - "DataOptimizer統合"
        - "AnalysisCache統合"

    - path: "scripts/cron/data_scheduler.py"
      description: "最適化機能統合"
      changes:
        - "DataOptimizer統合"
        - "バッチ処理最適化"

    - path: "src/infrastructure/external_apis/yahoo_finance_client.py"
      description: "レート制限強化"
      changes:
        - "指数バックオフ強化"
        - "キャッシュ統合"
        - "エラーハンドリング改善"

    - path: "src/infrastructure/analysis/technical_indicators.py"
      description: "キャッシュ対応"
      changes:
        - "AnalysisCache統合"
        - "キャッシュチェック追加"

    - path: "src/infrastructure/analysis/currency_correlation_analyzer.py"
      description: "最適化対応"
      changes:
        - "DataOptimizer統合"
        - "一括取得最適化"

    - path: "src/infrastructure/messaging/discord_client.py"
      description: "通知履歴対応"
      changes:
        - "通知履歴記録"
        - "重複チェック機能"

# 🔄 実装フェーズ詳細
implementation_phases:
  phase_1:
    name: "基盤キャッシュシステム"
    duration: "1週間"
    priority: "高"
    dependencies: []

    tasks:
      database_models:
        - name: "AnalysisCacheModel作成"
          file: "src/infrastructure/database/models/analysis_cache_model.py"
          description: "分析結果キャッシュ用モデル"
          sql_schema: |
            CREATE TABLE analysis_cache (
                id SERIAL PRIMARY KEY,
                uuid VARCHAR(36) UNIQUE NOT NULL,
                analysis_type VARCHAR(50) NOT NULL,
                currency_pair VARCHAR(10) NOT NULL,
                timeframe VARCHAR(10),
                analysis_data JSONB NOT NULL,
                cache_key VARCHAR(255) UNIQUE NOT NULL,
                expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                version INTEGER DEFAULT 1
            );

        - name: "NotificationHistoryModel作成"
          file: "src/infrastructure/database/models/notification_history_model.py"
          description: "通知履歴用モデル"
          sql_schema: |
            CREATE TABLE notification_history (
                id SERIAL PRIMARY KEY,
                uuid VARCHAR(36) UNIQUE NOT NULL,
                pattern_type VARCHAR(50) NOT NULL,
                currency_pair VARCHAR(10) NOT NULL,
                notification_data JSONB NOT NULL,
                sent_at TIMESTAMP WITH TIME ZONE NOT NULL,
                discord_message_id VARCHAR(50),
                status VARCHAR(20) DEFAULT 'sent',
                created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                version INTEGER DEFAULT 1
            );

        - name: "ApiCallHistoryModel作成"
          file: "src/infrastructure/database/models/api_call_history_model.py"
          description: "API呼び出し履歴用モデル"
          sql_schema: |
            CREATE TABLE api_call_history (
                id SERIAL PRIMARY KEY,
                uuid VARCHAR(36) UNIQUE NOT NULL,
                api_name VARCHAR(50) NOT NULL,
                endpoint VARCHAR(100) NOT NULL,
                currency_pair VARCHAR(10),
                response_time_ms INTEGER,
                status_code INTEGER,
                success BOOLEAN NOT NULL,
                error_message TEXT,
                called_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                version INTEGER DEFAULT 1
            );

      domain_entities:
        - name: "AnalysisCacheエンティティ作成"
          file: "src/domain/entities/analysis_cache.py"
          description: "分析キャッシュドメインエンティティ"
          base_class: "BaseEntity"
          fields:
            - "analysis_type: str"
            - "currency_pair: str"
            - "timeframe: Optional[str]"
            - "analysis_data: Dict[str, Any]"
            - "cache_key: str"
            - "expires_at: datetime"

        - name: "NotificationHistoryエンティティ作成"
          file: "src/domain/entities/notification_history.py"
          description: "通知履歴ドメインエンティティ"
          base_class: "BaseEntity"
          fields:
            - "pattern_type: str"
            - "currency_pair: str"
            - "notification_data: Dict[str, Any]"
            - "sent_at: datetime"
            - "discord_message_id: Optional[str]"
            - "status: str"

        - name: "ApiCallHistoryエンティティ作成"
          file: "src/domain/entities/api_call_history.py"
          description: "API呼び出し履歴ドメインエンティティ"
          base_class: "BaseEntity"
          fields:
            - "api_name: str"
            - "endpoint: str"
            - "currency_pair: Optional[str]"
            - "response_time_ms: Optional[int]"
            - "status_code: Optional[int]"
            - "success: bool"
            - "error_message: Optional[str]"
            - "called_at: datetime"

      repositories:
        - name: "AnalysisCacheRepository作成"
          file: "src/domain/repositories/analysis_cache_repository.py"
          description: "分析キャッシュリポジトリインターフェース"
          methods:
            - "find_by_cache_key(cache_key: str)"
            - "find_by_analysis_type(analysis_type: str, currency_pair: str)"
            - "save(analysis_cache: AnalysisCache)"
            - "delete_expired()"

        - name: "NotificationHistoryRepository作成"
          file: "src/domain/repositories/notification_history_repository.py"
          description: "通知履歴リポジトリインターフェース"
          methods:
            - "find_recent_by_pattern(pattern_type: str, currency_pair: str, hours: int)"
            - "save(notification_history: NotificationHistory)"
            - "find_by_discord_message_id(message_id: str)"

        - name: "ApiCallHistoryRepository作成"
          file: "src/domain/repositories/api_call_history_repository.py"
          description: "API呼び出し履歴リポジトリインターフェース"
          methods:
            - "save(api_call_history: ApiCallHistory)"
            - "find_recent_calls(api_name: str, minutes: int)"
            - "get_call_statistics(api_name: str, hours: int)"

      implementations:
        - name: "AnalysisCacheRepositoryImpl作成"
          file: "src/infrastructure/database/repositories/analysis_cache_repository_impl.py"
          description: "分析キャッシュリポジトリ実装"
          base_class: "BaseRepositoryImpl"
          dependencies:
            - "AnalysisCacheModel"
            - "AnalysisCache"

        - name: "NotificationHistoryRepositoryImpl作成"
          file: "src/infrastructure/database/repositories/notification_history_repository_impl.py"
          description: "通知履歴リポジトリ実装"
          base_class: "BaseRepositoryImpl"
          dependencies:
            - "NotificationHistoryModel"
            - "NotificationHistory"

        - name: "ApiCallHistoryRepositoryImpl作成"
          file: "src/infrastructure/database/repositories/api_call_history_repository_impl.py"
          description: "API呼び出し履歴リポジトリ実装"
          base_class: "BaseRepositoryImpl"
          dependencies:
            - "ApiCallHistoryModel"
            - "ApiCallHistory"

      cache_system:
        - name: "CacheManager作成"
          file: "src/infrastructure/cache/cache_manager.py"
          description: "3層キャッシュ管理システム"
          features:
            - "メモリキャッシュ"
            - "ファイルキャッシュ"
            - "データベースキャッシュ"
            - "有効期限管理"
            - "自動クリーンアップ"

        - name: "FileCache作成"
          file: "src/infrastructure/cache/file_cache.py"
          description: "ファイルキャッシュシステム"
          features:
            - "ディスクベースキャッシュ"
            - "サイズ制限"
            - "TTL管理"
            - "圧縮機能"

      migrations:
        - name: "Alembicマイグレーション作成"
          description: "新規テーブルのマイグレーション"
          commands:
            - "alembic revision --autogenerate -m 'Add cache and history tables'"
            - "alembic upgrade head"

      tests:
        - name: "データベースモデルテスト"
          file: "tests/unit/test_cache_models.py"
          description: "新規モデルの単体テスト"

        - name: "リポジトリテスト"
          file: "tests/unit/test_cache_repositories.py"
          description: "新規リポジトリの単体テスト"

        - name: "キャッシュシステムテスト"
          file: "tests/unit/test_cache_manager.py"
          description: "CacheManagerの単体テスト"

  phase_2:
    name: "データ最適化システム"
    duration: "1週間"
    priority: "高"
    dependencies: ["phase_1"]

    tasks:
      optimization_system:
        - name: "DataOptimizer作成"
          file: "src/infrastructure/optimization/data_optimizer.py"
          description: "データ取得最適化システム"
          features:
            - "一括データ取得"
            - "キャッシュ統合"
            - "効率的な履歴データ取得"
            - "API制限対応"

        - name: "ApiRateLimiter作成"
          file: "src/infrastructure/optimization/api_rate_limiter.py"
          description: "API制限管理システム"
          features:
            - "指数バックオフ"
            - "レート制限監視"
            - "自動リトライ"
            - "制限回避戦略"

        - name: "BatchProcessor作成"
          file: "src/infrastructure/optimization/batch_processor.py"
          description: "バッチ処理システム"
          features:
            - "一括API呼び出し"
            - "並列処理"
            - "エラーハンドリング"
            - "結果集約"

      analysis_cache:
        - name: "AnalysisCache作成"
          file: "src/infrastructure/cache/analysis_cache.py"
          description: "分析結果キャッシュシステム"
          features:
            - "分析結果キャッシュ"
            - "キャッシュ無効化"
            - "有効期限管理"
            - "統計情報"

      client_optimization:
        - name: "YahooFinanceClient最適化"
          file: "src/infrastructure/external_apis/yahoo_finance_client.py"
          description: "Yahoo Financeクライアント最適化"
          changes:
            - "DataOptimizer統合"
            - "ApiRateLimiter統合"
            - "キャッシュ統合"
            - "エラーハンドリング改善"

        - name: "TechnicalIndicators最適化"
          file: "src/infrastructure/analysis/technical_indicators.py"
          description: "テクニカル指標アナライザー最適化"
          changes:
            - "AnalysisCache統合"
            - "キャッシュチェック追加"
            - "効率的なデータ取得"

        - name: "CurrencyCorrelationAnalyzer最適化"
          file: "src/infrastructure/analysis/currency_correlation_analyzer.py"
          description: "通貨相関アナライザー最適化"
          changes:
            - "DataOptimizer統合"
            - "一括取得最適化"
            - "キャッシュ統合"

      utilities:
        - name: "CacheUtils作成"
          file: "src/utils/cache_utils.py"
          description: "キャッシュユーティリティ"
          features:
            - "キャッシュキー生成"
            - "TTL計算"
            - "キャッシュ統計"

        - name: "OptimizationUtils作成"
          file: "src/utils/optimization_utils.py"
          description: "最適化ユーティリティ"
          features:
            - "バッチ処理ヘルパー"
            - "レート制限計算"
            - "パフォーマンス測定"

      tests:
        - name: "最適化システムテスト"
          file: "tests/unit/test_data_optimizer.py"
          description: "DataOptimizerの単体テスト"

        - name: "分析キャッシュテスト"
          file: "tests/unit/test_analysis_cache.py"
          description: "AnalysisCacheの単体テスト"

        - name: "統合テスト"
          file: "tests/integration/test_optimization_flow.py"
          description: "最適化フローの統合テスト"

  phase_3:
    name: "通知システム最適化"
    duration: "1週間"
    priority: "中"
    dependencies: ["phase_1", "phase_2"]

    tasks:
      notification_system:
        - name: "NotificationManager拡張"
          file: "src/infrastructure/messaging/notification_manager.py"
          description: "通知管理システム拡張"
          features:
            - "重複防止機能"
            - "通知履歴管理"
            - "パターン検出統合"
            - "統計情報"

        - name: "DiscordClient拡張"
          file: "src/infrastructure/messaging/discord_client.py"
          description: "Discordクライアント拡張"
          changes:
            - "通知履歴記録"
            - "重複チェック機能"
            - "統計情報追加"

      cron_integration:
        - name: "integrated_ai_discord最適化"
          file: "scripts/cron/integrated_ai_discord.py"
          description: "統合AI Discord最適化"
          changes:
            - "CacheManager統合"
            - "DataOptimizer統合"
            - "AnalysisCache統合"
            - "NotificationManager統合"

        - name: "real_ai_discord_v2最適化"
          file: "scripts/cron/real_ai_discord_v2.py"
          description: "リアルAI Discord最適化"
          changes:
            - "CacheManager統合"
            - "DataOptimizer統合"
            - "AnalysisCache統合"
            - "NotificationManager統合"

        - name: "data_scheduler最適化"
          file: "scripts/cron/data_scheduler.py"
          description: "データスケジューラー最適化"
          changes:
            - "DataOptimizer統合"
            - "バッチ処理最適化"
            - "エラーハンドリング改善"

      monitoring:
        - name: "API呼び出し監視"
          description: "API呼び出し回数の監視システム"
          features:
            - "リアルタイム監視"
            - "アラート機能"
            - "統計ダッシュボード"

        - name: "キャッシュ監視"
          description: "キャッシュヒット率の監視"
          features:
            - "ヒット率測定"
            - "パフォーマンス監視"
            - "自動最適化"

      tests:
        - name: "通知システムテスト"
          file: "tests/unit/test_notification_manager.py"
          description: "NotificationManagerの単体テスト"

        - name: "Cron統合テスト"
          file: "tests/integration/test_cron_integration.py"
          description: "Cronスクリプト統合テスト"

        - name: "パフォーマンステスト"
          file: "tests/performance/test_api_optimization.py"
          description: "API最適化のパフォーマンステスト"

# 📊 依存関係マップ
dependencies:
  import_mapping:
    cache_manager:
      imports:
        - "from src.infrastructure.database.connection import get_async_session"
        - "from src.infrastructure.cache.file_cache import FileCache"
        - "from src.utils.cache_utils import generate_cache_key"
      used_by:
        - "data_optimizer"
        - "analysis_cache"
        - "notification_manager"

    data_optimizer:
      imports:
        - "from src.infrastructure.cache.cache_manager import CacheManager"
        - "from src.infrastructure.external_apis.yahoo_finance_client import YahooFinanceClient"
        - "from src.infrastructure.optimization.api_rate_limiter import ApiRateLimiter"
      used_by:
        - "integrated_ai_discord"
        - "real_ai_discord_v2"
        - "data_scheduler"

    analysis_cache:
      imports:
        - "from src.infrastructure.database.repositories.analysis_cache_repository_impl import AnalysisCacheRepositoryImpl"
        - "from src.domain.entities.analysis_cache import AnalysisCache"
      used_by:
        - "technical_indicators"
        - "currency_correlation_analyzer"
        - "integrated_ai_discord"

    notification_manager:
      imports:
        - "from src.infrastructure.messaging.discord_client import DiscordClient"
        - "from src.infrastructure.database.repositories.notification_history_repository_impl import NotificationHistoryRepositoryImpl"
      used_by:
        - "integrated_ai_discord"
        - "real_ai_discord_v2"

# 🔧 設定ファイル
configuration:
  cache_settings:
    file: "config/cache_settings.py"
    content: |
      CACHE_CONFIG = {
          "memory_cache": {
              "max_size": 1000,
              "ttl_seconds": 300
          },
          "file_cache": {
              "path": "/app/cache",
              "max_size_mb": 100,
              "ttl_seconds": 1800
          },
          "database_cache": {
              "ttl_minutes": 60,
              "cleanup_interval_hours": 24
          }
      }

  optimization_settings:
    file: "config/optimization_settings.py"
    content: |
      OPTIMIZATION_CONFIG = {
          "api_rate_limits": {
              "yahoo_finance": {
                  "calls_per_minute": 100,
                  "calls_per_hour": 1000,
                  "backoff_multiplier": 2.0
              }
          },
          "batch_processing": {
              "max_concurrent_requests": 5,
              "request_delay_ms": 100
          }
      }

# 📝 実装チェックリスト
implementation_checklist:
  phase_1:
    database:
      - "AnalysisCacheModel作成"
      - "NotificationHistoryModel作成"
      - "ApiCallHistoryModel作成"
      - "Alembicマイグレーション実行"
    domain:
      - "AnalysisCacheエンティティ作成"
      - "NotificationHistoryエンティティ作成"
      - "ApiCallHistoryエンティティ作成"
    repositories:
      - "AnalysisCacheRepository作成"
      - "NotificationHistoryRepository作成"
      - "ApiCallHistoryRepository作成"
      - "各リポジトリ実装作成"
    cache:
      - "CacheManager作成"
      - "FileCache作成"
    tests:
      - "データベースモデルテスト"
      - "リポジトリテスト"
      - "キャッシュシステムテスト"

  phase_2:
    optimization:
      - "DataOptimizer作成"
      - "ApiRateLimiter作成"
      - "BatchProcessor作成"
    analysis_cache:
      - "AnalysisCache作成"
    client_optimization:
      - "YahooFinanceClient最適化"
      - "TechnicalIndicators最適化"
      - "CurrencyCorrelationAnalyzer最適化"
    utilities:
      - "CacheUtils作成"
      - "OptimizationUtils作成"
    tests:
      - "最適化システムテスト"
      - "分析キャッシュテスト"
      - "統合テスト"

  phase_3:
    notification:
      - "NotificationManager拡張"
      - "DiscordClient拡張"
    cron_integration:
      - "integrated_ai_discord最適化"
      - "real_ai_discord_v2最適化"
      - "data_scheduler最適化"
    monitoring:
      - "API呼び出し監視"
      - "キャッシュ監視"
    tests:
      - "通知システムテスト"
      - "Cron統合テスト"
      - "パフォーマンステスト"

# 🎯 期待効果
expected_results:
  api_calls:
    before: 171
    after: 30
    reduction_percentage: 82.5
    breakdown:
      database_cache: "60%削減"
      analysis_cache: "20%削減"
      batch_optimization: "10%削減"

  performance:
    response_time:
      before: "3-5秒"
      after: "1-2秒"
      improvement: "50%短縮"
    error_rate:
      before: "15%"
      after: "1.5%"
      improvement: "90%削減"
    system_stability:
      before: "不安定"
      after: "安定"
      improvement: "大幅向上"

# 🔍 リスク管理
risk_management:
  technical_risks:
    - risk: "キャッシュ不整合"
      mitigation: "定期的なキャッシュクリーンアップ"
    - risk: "メモリ不足"
      mitigation: "メモリ使用量監視"
    - risk: "データベース負荷"
      mitigation: "データベースインデックス最適化"

  operational_risks:
    - risk: "段階的ロールアウト"
      mitigation: "段階的なロールアウト"
    - risk: "データ品質低下"
      mitigation: "データ鮮度監視"

# 📚 参考資料
references:
  - "api_optimization_design_2025.md"
  - "notification_implementation_plan_2025.yaml"
  - "インフラ・プラグイン設計_20250809.md"
  - "詳細内部設計_20250809.md"
