# 旧ファイル名: implementation_todo_2025.yaml

project: "USD/JPY パターン検出システム実装"
version: "2025.1.0"
description: "マルチタイムフレームデータベースパターン検出システムの実装計画"

phases:
  phase1_data_foundation:
    name: "データ基盤の整備"
    description: "各時間軸のデータを適切に取得・保存し、テクニカル指標を計算する"
    priority: "High"
    estimated_hours: 16

    tasks:
      task1_1:
        name: "マルチタイムフレームデータ取得システムの修正"
        description: "Yahoo Finance APIの正しいメソッドシグネチャに対応し、各時間軸のデータ取得を実装"
        status: "In Progress"
        priority: "High"
        estimated_hours: 4

        files:
          modify:
            - path: "src/infrastructure/database/services/multi_timeframe_data_fetcher_service.py"
              description: "Yahoo Finance APIの正しいメソッドシグネチャに対応"
              changes:
                - "get_historical_dataメソッドの引数を修正（start_date, end_date → period）"
                - "各時間軸のデータ取得ロジックを修正"
                - "重複チェック機能の改善"
                - "エラーハンドリングの強化"

        dependencies:
          - "src/infrastructure/external_apis/yahoo_finance_client.py"
          - "src/infrastructure/database/repositories/price_data_repository_impl.py"

        test_files:
          - "scripts/test/test_multi_timeframe_fetcher.py"

        acceptance_criteria:
          - "5分足、1時間足、4時間足、日足のデータが正しく取得できる"
          - "重複データが適切にチェックされる"
          - "エラー時に適切にログが出力される"

      task1_2:
        name: "時間軸別データ保存システムの作成"
        description: "各時間軸のデータを適切に保存し、集計するシステムを実装"
        status: "Not Started"
        priority: "High"
        estimated_hours: 6

        files:
          create:
            - path: "src/infrastructure/database/services/timeframe_data_service.py"
              description: "時間軸別データ保存・集計サービス"
              classes:
                - name: "TimeframeDataService"
                  methods:
                    - "save_5m_data(price_data: PriceDataModel) -> PriceDataModel"
                    - "save_d1_data(price_data: PriceDataModel) -> PriceDataModel"
                    - "aggregate_and_save_h1_data() -> List[PriceDataModel]"
                    - "aggregate_and_save_h4_data() -> List[PriceDataModel]"
                    - "get_multi_timeframe_data(start_date: datetime, end_date: datetime) -> Dict"

        dependencies:
          - "src/infrastructure/database/services/multi_timeframe_data_fetcher_service.py"
          - "src/infrastructure/database/repositories/price_data_repository_impl.py"

        test_files:
          - "scripts/test/test_timeframe_data_service.py"

        acceptance_criteria:
          - "5分足データが正しく保存される"
          - "日足データが個別に取得・保存される"
          - "H1, H4データが5分足から正しく集計される"
          - "各時間軸のデータが適切に取得できる"

      task1_3:
        name: "マルチタイムフレームテクニカル指標計算システムの作成"
        description: "各時間軸のテクニカル指標を計算し、保存するシステムを実装"
        status: "Not Started"
        priority: "High"
        estimated_hours: 6

        files:
          create:
            - path: "src/infrastructure/database/services/multi_timeframe_technical_indicator_service.py"
              description: "マルチタイムフレームテクニカル指標計算サービス"
              classes:
                - name: "MultiTimeframeTechnicalIndicatorService"
                  methods:
                    - "calculate_all_timeframe_indicators() -> Dict"
                    - "calculate_timeframe_indicators(timeframe: str) -> Dict"
                    - "save_timeframe_indicators(timeframe: str, indicators: Dict) -> bool"
                    - "get_latest_indicators_by_timeframe(timeframe: str) -> Dict"

        dependencies:
          - "src/infrastructure/database/services/timeframe_data_service.py"
          - "src/infrastructure/database/repositories/technical_indicator_repository_impl.py"
          - "src/infrastructure/analysis/technical_indicators/*.py"

        test_files:
          - "scripts/test/test_multi_timeframe_technical_indicators.py"

        acceptance_criteria:
          - "各時間軸（5m, 1h, 4h, 1d）のRSI, MACD, BBが正しく計算される"
          - "計算結果がデータベースに正しく保存される"
          - "最新の指標値が適切に取得できる"

  phase2_pattern_detection:
    name: "パターン検出システム"
    description: "マルチタイムフレームデータを使用したパターン検出システムの実装"
    priority: "High"
    estimated_hours: 12

    tasks:
      task2_1:
        name: "効率的パターン検出サービスの修正"
        description: "各時間軸のデータを適切に取得し、パターン検出を実行する"
        status: "In Progress"
        priority: "High"
        estimated_hours: 6

        files:
          modify:
            - path: "src/infrastructure/database/services/efficient_pattern_detection_service.py"
              description: "効率的パターン検出サービスの修正"
              changes:
                - "各時間軸のデータ取得ロジックを修正"
                - "パターン検出器との連携改善"
                - "重複検出防止機能の強化"
                - "エラーハンドリングの改善"

        dependencies:
          - "src/infrastructure/database/services/timeframe_data_service.py"
          - "src/infrastructure/database/services/multi_timeframe_technical_indicator_service.py"
          - "src/infrastructure/database/repositories/pattern_detection_repository_impl.py"
          - "src/infrastructure/analysis/pattern_detectors/*.py"

        test_files:
          - "scripts/test/test_efficient_pattern_detection.py"

        acceptance_criteria:
          - "6つのパターン検出器が正しく動作する"
          - "マルチタイムフレームデータが適切に構築される"
          - "検出結果がデータベースに正しく保存される"
          - "重複検出が適切に防止される"

      task2_2:
        name: "パターン検出リポジトリの修正"
        description: "不足メソッドの追加とセッション管理の修正"
        status: "In Progress"
        priority: "Medium"
        estimated_hours: 2

        files:
          modify:
            - path: "src/infrastructure/database/repositories/pattern_detection_repository_impl.py"
              description: "パターン検出リポジトリの修正"
              changes:
                - "find_latestメソッドの追加"
                - "find_recent_duplicateメソッドの追加"
                - "セッション管理の修正（_session → session）"

        dependencies:
          - "src/infrastructure/database/repositories/base_repository_impl.py"

        test_files:
          - "scripts/test/test_pattern_detection_repository.py"

        acceptance_criteria:
          - "最新パターンの取得が正常に動作する"
          - "重複チェックが正常に動作する"
          - "セッション管理エラーが発生しない"

      task2_3:
        name: "パターン検出テストの実装"
        description: "パターン検出システムの包括的なテストを実装"
        status: "Not Started"
        priority: "Medium"
        estimated_hours: 4

        files:
          create:
            - path: "scripts/test/test_pattern_detection_integration.py"
              description: "パターン検出統合テスト"
            - path: "scripts/test/test_pattern_detectors.py"
              description: "個別パターン検出器テスト"

        dependencies:
          - "src/infrastructure/database/services/efficient_pattern_detection_service.py"
          - "src/infrastructure/analysis/pattern_detectors/*.py"

        acceptance_criteria:
          - "全パターン検出器が正常に動作する"
          - "統合テストが正常に完了する"
          - "エラーケースが適切に処理される"

  phase3_operation_system:
    name: "運用システム"
    description: "自動化されたデータ取得・パターン検出・通知システムの実装"
    priority: "Medium"
    estimated_hours: 8

    tasks:
      task3_1:
        name: "統合スケジューラーの作成"
        description: "データ取得、指標計算、パターン検出を統合したスケジューラーを実装"
        status: "Not Started"
        priority: "Medium"
        estimated_hours: 6

        files:
          create:
            - path: "src/infrastructure/schedulers/integrated_scheduler.py"
              description: "統合スケジューラー"
              classes:
                - name: "IntegratedScheduler"
                  methods:
                    - "start_data_collection() -> None"
                    - "start_pattern_detection() -> None"
                    - "start_notification_service() -> None"
                    - "schedule_5m_data_fetch() -> None"
                    - "schedule_d1_data_fetch() -> None"
                    - "schedule_pattern_detection() -> None"

        dependencies:
          - "src/infrastructure/database/services/multi_timeframe_data_fetcher_service.py"
          - "src/infrastructure/database/services/multi_timeframe_technical_indicator_service.py"
          - "src/infrastructure/database/services/efficient_pattern_detection_service.py"

        test_files:
          - "scripts/test/test_integrated_scheduler.py"

        acceptance_criteria:
          - "5分足データが5分間隔で取得される"
          - "日足データが1日1回取得される"
          - "パターン検出が5分間隔で実行される"
          - "エラー時に適切にリトライされる"

      task3_2:
        name: "通知システムの統合"
        description: "パターン検出結果をDiscordに通知するシステムを統合"
        status: "Not Started"
        priority: "Low"
        estimated_hours: 2

        files:
          modify:
            - path: "src/infrastructure/notification/discord_notification_service.py"
              description: "Discord通知サービスの修正"
              changes:
                - "パターン検出結果の通知機能を追加"
                - "重複通知防止機能を追加"
                - "通知メッセージのフォーマット改善"

        dependencies:
          - "src/infrastructure/database/services/efficient_pattern_detection_service.py"
          - "src/infrastructure/database/repositories/pattern_detection_repository_impl.py"

        test_files:
          - "scripts/test/test_discord_notification.py"

        acceptance_criteria:
          - "パターン検出結果がDiscordに通知される"
          - "重複通知が防止される"
          - "通知メッセージが適切にフォーマットされる"

files_to_delete:
  - path: "src/infrastructure/database/services/timeframe_converter.py"
    reason: "機能をtimeframe_data_service.pyに統合"
  - path: "scripts/test/simple_pattern_detector.py"
    reason: "テスト用のみ、不要"
  - path: "scripts/test/timeframe_accuracy_test.py"
    reason: "テスト用のみ、不要"

testing_strategy:
  unit_tests:
    - "各サービスの個別テスト"
    - "各リポジトリの個別テスト"
    - "各パターン検出器の個別テスト"

  integration_tests:
    - "データ取得からパターン検出までの統合テスト"
    - "マルチタイムフレームデータ構築テスト"
    - "通知システム統合テスト"

  performance_tests:
    - "大量データでのパフォーマンステスト"
    - "同時実行テスト"
    - "メモリ使用量テスト"

deployment_notes:
  - "データベースマイグレーションの実行"
  - "環境変数の設定"
  - "ログ設定の確認"
  - "監視システムの設定"

success_criteria:
  - "各時間軸のデータが正しく取得・保存される"
  - "テクニカル指標が各時間軸で正しく計算される"
  - "6つのパターン検出器が正常に動作する"
  - "自動化されたスケジューラーが正常に動作する"
  - "Discord通知が正常に動作する"
  - "システムが24時間安定して動作する"
