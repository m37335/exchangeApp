# Phase 1: 1時間足集計実装計画書
# Exchange Analytics System - 時間足集計システム

project:
  name: "Exchange Analytics System - 時間足集計システム"
  phase: "Phase 1: 1時間足集計"
  version: "1.0.0"
  created_date: "2025-08-15"
  priority: "高"
  estimated_duration: "2-3日"

overview:
  description: "5分足データから1時間足を自動集計・保存するシステムの実装"
  objective: "毎時05分に前1時間の5分足データを集計し、PostgreSQLに保存"
  success_criteria:
    - "1時間足データが正常に集計・保存される"
    - "処理時間が10秒以内"
    - "重複データが適切に回避される"
    - "エラーハンドリングが正常に動作する"

dependencies:
  existing_files:
    - "src/infrastructure/database/connection.py"
    - "src/infrastructure/database/models/price_data_model.py"
    - "src/infrastructure/database/repositories/price_data_repository_impl.py"
    - "src/utils/logging_config.py"
    - "scripts/cron/simple_data_fetcher.py (参考)"
  new_files:
    - "scripts/cron/hourly_aggregator.py"
    - "logs/hourly_aggregator.log"

tasks:
  task_1:
    id: "TASK-001"
    name: "BaseAggregator基底クラス作成"
    description: "時間足集計の共通機能を提供する基底クラスを実装"
    priority: "高"
    estimated_hours: 4
    dependencies: []
    deliverables:
      - "BaseAggregatorクラスの実装"
      - "データベース接続管理機能"
      - "共通エラーハンドリング"
    acceptance_criteria:
      - "データベース接続が正常に確立される"
      - "リソースのクリーンアップが適切に実行される"
      - "抽象メソッドが定義されている"

  task_2:
    id: "TASK-002"
    name: "HourlyAggregatorクラス作成"
    description: "1時間足集計専用のクラスを実装"
    priority: "高"
    estimated_hours: 6
    dependencies: ["TASK-001"]
    deliverables:
      - "HourlyAggregatorクラスの実装"
      - "集計期間計算ロジック"
      - "OHLCV計算ロジック"
    acceptance_criteria:
      - "前1時間の期間が正しく計算される"
      - "OHLCVが正確に計算される"
      - "日本時間での処理が正常に動作する"

  task_3:
    id: "TASK-003"
    name: "データ取得ロジック実装"
    description: "5分足データを取得するロジックを実装"
    priority: "高"
    estimated_hours: 4
    dependencies: ["TASK-002"]
    deliverables:
      - "期間指定での5分足データ取得機能"
      - "データソースフィルタリング機能"
      - "データ検証機能"
    acceptance_criteria:
      - "指定期間の5分足データが取得される"
      - "データソースが正しくフィルタリングされる"
      - "データの整合性が検証される"

  task_4:
    id: "TASK-004"
    name: "重複チェックロジック実装"
    description: "既存データとの重複をチェックする機能を実装"
    priority: "中"
    estimated_hours: 3
    dependencies: ["TASK-003"]
    deliverables:
      - "重複チェック機能"
      - "既存データ検索機能"
      - "重複回避ロジック"
    acceptance_criteria:
      - "既存データが正しく検出される"
      - "重複データが適切にスキップされる"
      - "パフォーマンスが良好である"

  task_5:
    id: "TASK-005"
    name: "データ保存ロジック実装"
    description: "集計データをPostgreSQLに保存する機能を実装"
    priority: "高"
    estimated_hours: 4
    dependencies: ["TASK-004"]
    deliverables:
      - "データ保存機能"
      - "トランザクション管理"
      - "エラーハンドリング"
    acceptance_criteria:
      - "データが正常に保存される"
      - "トランザクションが適切に管理される"
      - "エラー時のロールバックが実行される"

  task_6:
    id: "TASK-006"
    name: "エラーハンドリング実装"
    description: "包括的なエラーハンドリング機能を実装"
    priority: "中"
    estimated_hours: 3
    dependencies: ["TASK-005"]
    deliverables:
      - "カスタム例外クラス"
      - "エラー分類機能"
      - "エラー回復機能"
    acceptance_criteria:
      - "適切な例外が発生する"
      - "エラーが適切に分類される"
      - "部分的な失敗から回復できる"

  task_7:
    id: "TASK-007"
    name: "ログ出力実装"
    description: "詳細なログ出力機能を実装"
    priority: "中"
    estimated_hours: 2
    dependencies: ["TASK-006"]
    deliverables:
      - "ログ設定"
      - "ログ出力機能"
      - "ログローテーション"
    acceptance_criteria:
      - "適切なログレベルで出力される"
      - "ログファイルが正しく作成される"
      - "ログローテーションが動作する"

  task_8:
    id: "TASK-008"
    name: "メインスクリプト作成"
    description: "hourly_aggregator.pyのメインスクリプトを実装"
    priority: "高"
    estimated_hours: 2
    dependencies: ["TASK-007"]
    deliverables:
      - "メインスクリプト"
      - "コマンドライン引数処理"
      - "実行フロー制御"
    acceptance_criteria:
      - "スクリプトが正常に実行される"
      - "コマンドライン引数が処理される"
      - "適切な終了コードが返される"

  task_9:
    id: "TASK-009"
    name: "単体テスト作成"
    description: "各機能の単体テストを実装"
    priority: "高"
    estimated_hours: 6
    dependencies: ["TASK-008"]
    deliverables:
      - "BaseAggregatorテスト"
      - "HourlyAggregatorテスト"
      - "OHLCV計算テスト"
      - "重複チェックテスト"
    acceptance_criteria:
      - "全テストが通過する"
      - "テストカバレッジが80%以上"
      - "エッジケースがテストされる"

  task_10:
    id: "TASK-010"
    name: "統合テスト作成"
    description: "完全なワークフローの統合テストを実装"
    priority: "高"
    estimated_hours: 4
    dependencies: ["TASK-009"]
    deliverables:
      - "統合テスト"
      - "パフォーマンステスト"
      - "エラーシナリオテスト"
    acceptance_criteria:
      - "完全なワークフローがテストされる"
      - "パフォーマンス目標が達成される"
      - "エラーシナリオが適切に処理される"

  task_11:
    id: "TASK-011"
    name: "crontab設定追加"
    description: "1時間足集計のcrontab設定を追加"
    priority: "中"
    estimated_hours: 1
    dependencies: ["TASK-010"]
    deliverables:
      - "crontab設定更新"
      - "ログファイル設定"
      - "実行権限設定"
    acceptance_criteria:
      - "crontabが正しく設定される"
      - "ログファイルが作成される"
      - "実行権限が適切に設定される"

  task_12:
    id: "TASK-012"
    name: "本番テスト実行"
    description: "実際のデータでの動作確認を実行"
    priority: "高"
    estimated_hours: 3
    dependencies: ["TASK-011"]
    deliverables:
      - "本番環境テスト"
      - "データ整合性確認"
      - "パフォーマンス測定"
    acceptance_criteria:
      - "実際のデータで正常に動作する"
      - "データ整合性が保たれる"
      - "パフォーマンス目標が達成される"

milestones:
  milestone_1:
    name: "基本クラス実装完了"
    date: "2025-08-16"
    tasks: ["TASK-001", "TASK-002"]
    description: "BaseAggregatorとHourlyAggregatorの基本実装が完了"

  milestone_2:
    name: "コア機能実装完了"
    date: "2025-08-17"
    tasks: ["TASK-003", "TASK-004", "TASK-005"]
    description: "データ取得、重複チェック、保存のコア機能が完了"

  milestone_3:
    name: "テスト実装完了"
    date: "2025-08-18"
    tasks: ["TASK-009", "TASK-010"]
    description: "単体テストと統合テストが完了"

  milestone_4:
    name: "本番デプロイ完了"
    date: "2025-08-19"
    tasks: ["TASK-011", "TASK-012"]
    description: "crontab設定と本番テストが完了"

risks:
  risk_1:
    description: "データベース接続エラー"
    probability: "中"
    impact: "高"
    mitigation: "接続プールとリトライ機能を実装"

  risk_2:
    description: "パフォーマンス問題"
    probability: "中"
    impact: "中"
    mitigation: "インデックス最適化とクエリ最適化"

  risk_3:
    description: "データ整合性問題"
    probability: "低"
    impact: "高"
    mitigation: "厳密なデータ検証とトランザクション管理"

resources:
  required_skills:
    - "Python (asyncio)"
    - "SQLAlchemy"
    - "PostgreSQL"
    - "crontab"
  estimated_total_hours: 42
  team_size: 1

success_metrics:
  functional:
    - "1時間足データが正常に集計・保存される"
    - "重複データが適切に回避される"
    - "エラーハンドリングが正常に動作する"
  performance:
    - "処理時間: 10秒以内"
    - "メモリ使用量: 50MB以内"
    - "データベース接続: 安定"
  quality:
    - "テストカバレッジ: 80%以上"
    - "コードレビュー完了"
    - "ドキュメント更新完了"
