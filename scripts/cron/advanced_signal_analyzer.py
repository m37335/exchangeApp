#!/usr/bin/env python3
"""
È´òÂ∫¶„Å™„Ç∑„Ç∞„Éä„É´ÂàÜÊûê„Ç∑„Çπ„ÉÜ„É†

Ë§áÊï∞ÊåáÊ®ô„ÅÆÁµÑ„ÅøÂêà„Çè„ÅõÂàÜÊûê„ÄÅ„Éà„É¨„É≥„ÉâÂàÜÊûê„ÄÅÂº∑Â∫¶Ë®àÁÆó„ÄÅ‰ø°È†ºÂ∫¶Ë©ï‰æ°„ÇíÂê´„ÇÄ
ÂåÖÊã¨ÁöÑ„Å™„Ç∑„Ç∞„Éä„É´ÂàÜÊûê„Ç∑„Çπ„ÉÜ„É†
"""

import asyncio
import pandas as pd
import numpy as np
from typing import Dict, List, Tuple, Optional, Any
from datetime import datetime, timedelta
from dataclasses import dataclass
from enum import Enum
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.text import Text
from sqlalchemy import select, and_
from sqlalchemy.ext.asyncio import AsyncSession

from src.infrastructure.database.connection import get_async_session
from src.infrastructure.database.models.technical_indicator_model import TechnicalIndicatorModel
from src.infrastructure.database.models.price_data_model import PriceDataModel

console = Console()


class SignalType(Enum):
    """„Ç∑„Ç∞„Éä„É´„Çø„Ç§„Éó"""
    BUY = "Ë≤∑„ÅÑ"
    SELL = "Â£≤„Çä"
    HOLD = "„Éõ„Éº„É´„Éâ"
    STRONG_BUY = "Âº∑ÂäõË≤∑„ÅÑ"
    STRONG_SELL = "Âº∑ÂäõÂ£≤„Çä"


class SignalStrength(Enum):
    """„Ç∑„Ç∞„Éä„É´Âº∑Â∫¶"""
    WEAK = "Âº±„ÅÑ"
    MODERATE = "‰∏≠Á®ãÂ∫¶"
    STRONG = "Âº∑„ÅÑ"
    VERY_STRONG = "ÈùûÂ∏∏„Å´Âº∑„ÅÑ"


@dataclass
class SignalAnalysis:
    """„Ç∑„Ç∞„Éä„É´ÂàÜÊûêÁµêÊûú"""
    signal_type: SignalType
    strength: SignalStrength
    confidence: float  # 0.0-1.0
    indicators: List[str]
    reasoning: str
    timestamp: datetime
    value: float


class AdvancedSignalAnalyzer:
    """È´òÂ∫¶„Å™„Ç∑„Ç∞„Éä„É´ÂàÜÊûê„Ç∑„Çπ„ÉÜ„É†"""

    def __init__(self, currency_pair: str = "USD/JPY"):
        self.currency_pair = currency_pair
        self.session: Optional[AsyncSession] = None

    async def analyze_comprehensive_signals(self, timeframe: str, days: int = 7) -> Dict[str, Any]:
        """
        ÂåÖÊã¨ÁöÑ„Å™„Ç∑„Ç∞„Éä„É´ÂàÜÊûê„ÇíÂÆüË°å

        Args:
            timeframe: ÊôÇÈñìË∂≥
            days: ÂàÜÊûêÊúüÈñì

        Returns:
            Dict[str, Any]: ÂàÜÊûêÁµêÊûú
        """
        try:
            # „Éá„Éº„ÇøÂèñÂæó
            data = await self._get_technical_data(timeframe, days)
            if data.empty:
                return {"error": f"{timeframe}„ÅÆ„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì"}

            # ÂêÑÁ®ÆÂàÜÊûê„ÇíÂÆüË°å
            results = {
                "current_signals": await self._analyze_current_signals(data),
                "trend_analysis": await self._analyze_trends(data),
                "divergence_analysis": await self._analyze_divergences(data),
                "support_resistance": await self._analyze_support_resistance(data),
                "volatility_analysis": await self._analyze_volatility(data),
                "momentum_analysis": await self._analyze_momentum(data),
                "summary": await self._generate_summary(data)
            }

            return results

        except Exception as e:
            console.print(f"‚ùå „Ç∑„Ç∞„Éä„É´ÂàÜÊûê„Ç®„É©„Éº: {e}")
            return {"error": str(e)}

    async def _get_technical_data(self, timeframe: str, days: int) -> pd.DataFrame:
        """„ÉÜ„ÇØ„Éã„Ç´„É´ÊåáÊ®ô„Éá„Éº„Çø„ÇíÂèñÂæó"""
        end_date = datetime.now()
        start_date = end_date - timedelta(days=days)

        query = (
            select(TechnicalIndicatorModel)
            .where(
                TechnicalIndicatorModel.currency_pair == self.currency_pair,
                TechnicalIndicatorModel.timeframe == timeframe,
                TechnicalIndicatorModel.timestamp >= start_date,
                TechnicalIndicatorModel.timestamp <= end_date
            )
            .order_by(TechnicalIndicatorModel.timestamp.desc())
            .limit(1000)  # „Éá„Éº„ÇøÈáè„ÇíÂà∂Èôê
        )

        result = await self.session.execute(query)
        indicators = result.scalars().all()

        # DataFrame„Å´Â§âÊèõ
        data = []
        for indicator in indicators:
            data.append({
                "timestamp": indicator.timestamp,
                "indicator_type": indicator.indicator_type,
                "value": float(indicator.value) if indicator.value is not None else None,
                "parameters": indicator.parameters
            })

        df = pd.DataFrame(data)
        if not df.empty:
            # „Éî„Éú„ÉÉ„Éà„ÉÜ„Éº„Éñ„É´„ÅßÊåáÊ®ôÂà•„Å´Êï¥ÁêÜ
            df = df.pivot_table(
                index="timestamp",
                columns="indicator_type",
                values="value",
                aggfunc="first"
            ).reset_index()
            
            # „Çø„Ç§„É†„Çπ„Çø„É≥„Éó„Åß„ÇΩ„Éº„ÉàÔºàÊúÄÊñ∞„Åå‰∏ä„Å´Êù•„Çã„Çà„ÅÜ„Å´Ôºâ
            df = df.sort_values('timestamp', ascending=False).reset_index(drop=True)
            
            # „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±„ÇíË°®Á§∫
            console.print(f"üìä {timeframe}ÊôÇÈñìË∂≥„ÅÆ„Éá„Éº„ÇøÂèñÂæóÁä∂Ê≥Å:")
            console.print(f"  ÂèñÂæó‰ª∂Êï∞: {len(df)}‰ª∂")
            console.print(f"  ÊúÄÊñ∞„Çø„Ç§„É†„Çπ„Çø„É≥„Éó: {df['timestamp'].max()}")
            console.print(f"  ÊåáÊ®ô: {list(df.columns[1:])}")
            if len(df) > 0:
                latest = df.iloc[0]
                console.print(f"  ÊúÄÊñ∞RSI: {latest.get('RSI', 'N/A')}")
                console.print(f"  ÊúÄÊñ∞MACD: {latest.get('MACD', 'N/A')}")
                console.print(f"  ÊúÄÊñ∞STOCH: {latest.get('STOCH', 'N/A')}")

        return df

    async def _analyze_current_signals(self, data: pd.DataFrame) -> List[SignalAnalysis]:
        """ÁèæÂú®„ÅÆ„Ç∑„Ç∞„Éä„É´„ÇíÂàÜÊûê"""
        signals = []
        
        if data.empty:
            return signals

        latest = data.iloc[0]
        
        # RSIÂàÜÊûê
        if "RSI" in data.columns and not pd.isna(latest["RSI"]):
            rsi_signal = self._analyze_rsi_signal(latest["RSI"])
            if rsi_signal:
                signals.append(rsi_signal)

        # MACDÂàÜÊûê
        if "MACD" in data.columns and not pd.isna(latest["MACD"]):
            macd_signal = self._analyze_macd_signal(latest["MACD"])
            if macd_signal:
                signals.append(macd_signal)

        # „Çπ„Éà„Ç≠„É£„Çπ„ÉÜ„Ç£„ÇØ„ÇπÂàÜÊûê
        if "STOCH" in data.columns and not pd.isna(latest["STOCH"]):
            stoch_signal = self._analyze_stochastic_signal(latest["STOCH"])
            if stoch_signal:
                signals.append(stoch_signal)

        # „Éú„É™„É≥„Ç∏„É£„Éº„Éê„É≥„ÉâÂàÜÊûê
        if "BB" in data.columns and not pd.isna(latest["BB"]):
            bb_signal = self._analyze_bollinger_signal(data)
            if bb_signal:
                signals.append(bb_signal)

        return signals

    def _analyze_rsi_signal(self, rsi_value: float) -> Optional[SignalAnalysis]:
        """RSI„Ç∑„Ç∞„Éä„É´ÂàÜÊûê"""
        if rsi_value >= 80:
            return SignalAnalysis(
                signal_type=SignalType.STRONG_SELL,
                strength=SignalStrength.VERY_STRONG,
                confidence=0.9,
                indicators=["RSI"],
                reasoning=f"RSI„ÅåÊ•µÁ´Ø„Å™ÈÅéË≤∑„ÅÑÂúèÔºà{rsi_value:.2f}Ôºâ„ÇíÁ§∫„Åó„Å¶„ÅÑ„Çã",
                timestamp=datetime.now(),
                value=rsi_value
            )
        elif rsi_value >= 70:
            return SignalAnalysis(
                signal_type=SignalType.SELL,
                strength=SignalStrength.STRONG,
                confidence=0.7,
                indicators=["RSI"],
                reasoning=f"RSI„ÅåÈÅéË≤∑„ÅÑÂúèÔºà{rsi_value:.2f}Ôºâ„ÇíÁ§∫„Åó„Å¶„ÅÑ„Çã",
                timestamp=datetime.now(),
                value=rsi_value
            )
        elif rsi_value <= 20:
            return SignalAnalysis(
                signal_type=SignalType.STRONG_BUY,
                strength=SignalStrength.VERY_STRONG,
                confidence=0.9,
                indicators=["RSI"],
                reasoning=f"RSI„ÅåÊ•µÁ´Ø„Å™ÈÅéÂ£≤„ÇäÂúèÔºà{rsi_value:.2f}Ôºâ„ÇíÁ§∫„Åó„Å¶„ÅÑ„Çã",
                timestamp=datetime.now(),
                value=rsi_value
            )
        elif rsi_value <= 30:
            return SignalAnalysis(
                signal_type=SignalType.BUY,
                strength=SignalStrength.STRONG,
                confidence=0.7,
                indicators=["RSI"],
                reasoning=f"RSI„ÅåÈÅéÂ£≤„ÇäÂúèÔºà{rsi_value:.2f}Ôºâ„ÇíÁ§∫„Åó„Å¶„ÅÑ„Çã",
                timestamp=datetime.now(),
                value=rsi_value
            )
        
        return None

    def _analyze_macd_signal(self, macd_value: float) -> Optional[SignalAnalysis]:
        """MACD„Ç∑„Ç∞„Éä„É´ÂàÜÊûê"""
        if macd_value > 0.05:
            return SignalAnalysis(
                signal_type=SignalType.STRONG_BUY,
                strength=SignalStrength.STRONG,
                confidence=0.8,
                indicators=["MACD"],
                reasoning=f"MACD„ÅåÂº∑„ÅÑÈôΩÊÄßÔºà{macd_value:.3f}Ôºâ„ÇíÁ§∫„Åó„Å¶„ÅÑ„Çã",
                timestamp=datetime.now(),
                value=macd_value
            )
        elif macd_value > 0:
            return SignalAnalysis(
                signal_type=SignalType.BUY,
                strength=SignalStrength.MODERATE,
                confidence=0.6,
                indicators=["MACD"],
                reasoning=f"MACD„ÅåÈôΩÊÄßÔºà{macd_value:.3f}Ôºâ„ÇíÁ§∫„Åó„Å¶„ÅÑ„Çã",
                timestamp=datetime.now(),
                value=macd_value
            )
        elif macd_value < -0.05:
            return SignalAnalysis(
                signal_type=SignalType.STRONG_SELL,
                strength=SignalStrength.STRONG,
                confidence=0.8,
                indicators=["MACD"],
                reasoning=f"MACD„ÅåÂº∑„ÅÑÈô∞ÊÄßÔºà{macd_value:.3f}Ôºâ„ÇíÁ§∫„Åó„Å¶„ÅÑ„Çã",
                timestamp=datetime.now(),
                value=macd_value
            )
        elif macd_value < 0:
            return SignalAnalysis(
                signal_type=SignalType.SELL,
                strength=SignalStrength.MODERATE,
                confidence=0.6,
                indicators=["MACD"],
                reasoning=f"MACD„ÅåÈô∞ÊÄßÔºà{macd_value:.3f}Ôºâ„ÇíÁ§∫„Åó„Å¶„ÅÑ„Çã",
                timestamp=datetime.now(),
                value=macd_value
            )
        
        return None

    def _analyze_stochastic_signal(self, stoch_value: float) -> Optional[SignalAnalysis]:
        """„Çπ„Éà„Ç≠„É£„Çπ„ÉÜ„Ç£„ÇØ„Çπ„Ç∑„Ç∞„Éä„É´ÂàÜÊûê"""
        if stoch_value >= 90:
            return SignalAnalysis(
                signal_type=SignalType.STRONG_SELL,
                strength=SignalStrength.VERY_STRONG,
                confidence=0.9,
                indicators=["STOCH"],
                reasoning=f"„Çπ„Éà„Ç≠„É£„Çπ„ÉÜ„Ç£„ÇØ„Çπ„ÅåÊ•µÁ´Ø„Å™ÈÅéË≤∑„ÅÑÂúèÔºà{stoch_value:.2f}Ôºâ„ÇíÁ§∫„Åó„Å¶„ÅÑ„Çã",
                timestamp=datetime.now(),
                value=stoch_value
            )
        elif stoch_value >= 80:
            return SignalAnalysis(
                signal_type=SignalType.SELL,
                strength=SignalStrength.STRONG,
                confidence=0.7,
                indicators=["STOCH"],
                reasoning=f"„Çπ„Éà„Ç≠„É£„Çπ„ÉÜ„Ç£„ÇØ„Çπ„ÅåÈÅéË≤∑„ÅÑÂúèÔºà{stoch_value:.2f}Ôºâ„ÇíÁ§∫„Åó„Å¶„ÅÑ„Çã",
                timestamp=datetime.now(),
                value=stoch_value
            )
        elif stoch_value <= 10:
            return SignalAnalysis(
                signal_type=SignalType.STRONG_BUY,
                strength=SignalStrength.VERY_STRONG,
                confidence=0.9,
                indicators=["STOCH"],
                reasoning=f"„Çπ„Éà„Ç≠„É£„Çπ„ÉÜ„Ç£„ÇØ„Çπ„ÅåÊ•µÁ´Ø„Å™ÈÅéÂ£≤„ÇäÂúèÔºà{stoch_value:.2f}Ôºâ„ÇíÁ§∫„Åó„Å¶„ÅÑ„Çã",
                timestamp=datetime.now(),
                value=stoch_value
            )
        elif stoch_value <= 20:
            return SignalAnalysis(
                signal_type=SignalType.BUY,
                strength=SignalStrength.STRONG,
                confidence=0.7,
                indicators=["STOCH"],
                reasoning=f"„Çπ„Éà„Ç≠„É£„Çπ„ÉÜ„Ç£„ÇØ„Çπ„ÅåÈÅéÂ£≤„ÇäÂúèÔºà{stoch_value:.2f}Ôºâ„ÇíÁ§∫„Åó„Å¶„ÅÑ„Çã",
                timestamp=datetime.now(),
                value=stoch_value
            )
        
        return None

    def _analyze_bollinger_signal(self, data: pd.DataFrame) -> Optional[SignalAnalysis]:
        """„Éú„É™„É≥„Ç∏„É£„Éº„Éê„É≥„Éâ„Ç∑„Ç∞„Éä„É´ÂàÜÊûê"""
        if "BB" not in data.columns or data.empty:
            return None

        latest_bb = data.iloc[0]["BB"]
        if pd.isna(latest_bb):
            return None

        # „Éú„É™„É≥„Ç∏„É£„Éº„Éê„É≥„Éâ„ÅÆ‰ΩçÁΩÆ„ÇíÂàÜÊûê
        # ÂÆüÈöõ„ÅÆÂÆüË£Ö„Åß„ÅØ‰æ°Ê†º„Éá„Éº„Çø„Å®ÁµÑ„ÅøÂêà„Çè„Åõ„Å¶ÂàÜÊûê
        return SignalAnalysis(
            signal_type=SignalType.HOLD,
            strength=SignalStrength.WEAK,
            confidence=0.3,
            indicators=["BB"],
            reasoning=f"„Éú„É™„É≥„Ç∏„É£„Éº„Éê„É≥„Éâ‰ΩçÁΩÆ: {latest_bb:.2f}",
            timestamp=datetime.now(),
            value=latest_bb
        )

    async def _analyze_trends(self, data: pd.DataFrame) -> Dict[str, Any]:
        """„Éà„É¨„É≥„ÉâÂàÜÊûê"""
        if data.empty:
            return {"error": "„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì"}

        trends = {}
        
        # RSI„Éà„É¨„É≥„Éâ
        if "RSI" in data.columns:
            rsi_trend = self._calculate_trend(data["RSI"])
            trends["RSI"] = rsi_trend

        # MACD„Éà„É¨„É≥„Éâ
        if "MACD" in data.columns:
            macd_trend = self._calculate_trend(data["MACD"])
            trends["MACD"] = macd_trend

        return trends

    def _calculate_trend(self, series: pd.Series) -> Dict[str, Any]:
        """„Éà„É¨„É≥„ÉâË®àÁÆó"""
        if len(series) < 2:
            return {"direction": "‰∏çÊòé", "strength": 0, "slope": 0}

        # Á∑öÂΩ¢ÂõûÂ∏∞„Åß„Éà„É¨„É≥„Éâ„ÇíË®àÁÆó
        x = np.arange(len(series))
        y = series.dropna().values
        
        if len(y) < 2:
            return {"direction": "‰∏çÊòé", "strength": 0, "slope": 0}

        slope, intercept = np.polyfit(x[:len(y)], y, 1)
        
        # „Éà„É¨„É≥„ÉâÊñπÂêë
        if slope > 0.1:
            direction = "‰∏äÊòá"
        elif slope < -0.1:
            direction = "‰∏ãÈôç"
        else:
            direction = "Ê®™„Å∞„ÅÑ"

        # „Éà„É¨„É≥„ÉâÂº∑Â∫¶ÔºàR¬≤ÂÄ§Ôºâ
        y_pred = slope * x[:len(y)] + intercept
        r_squared = 1 - np.sum((y - y_pred) ** 2) / np.sum((y - np.mean(y)) ** 2)
        
        return {
            "direction": direction,
            "strength": r_squared,
            "slope": slope,
            "current_value": y[-1] if len(y) > 0 else None
        }

    async def _analyze_divergences(self, data: pd.DataFrame) -> List[Dict[str, Any]]:
        """„ÉÄ„Ç§„Éê„Éº„Ç∏„Çß„É≥„ÇπÂàÜÊûê"""
        divergences = []
        
        # ‰æ°Ê†º„Éá„Éº„Çø„ÇÇÂèñÂæó„Åó„Å¶„ÉÄ„Ç§„Éê„Éº„Ç∏„Çß„É≥„Çπ„ÇíÊ§úÂá∫
        # ÂÆüË£Ö‰æãÔºöRSI„Å®‰æ°Ê†º„ÅÆ„ÉÄ„Ç§„Éê„Éº„Ç∏„Çß„É≥„Çπ
        
        return divergences

    async def _analyze_support_resistance(self, data: pd.DataFrame) -> Dict[str, Any]:
        """„Çµ„Éù„Éº„Éà„Éª„É¨„Ç∏„Çπ„Çø„É≥„ÇπÂàÜÊûê"""
        # ÁßªÂãïÂπ≥ÂùáÁ∑ö„Çí„Çµ„Éù„Éº„Éà„Éª„É¨„Ç∏„Çπ„Çø„É≥„Çπ„Å®„Åó„Å¶ÂàÜÊûê
        support_resistance = {}
        
        if "SMA" in data.columns:
            sma_values = data["SMA"].dropna()
            if not sma_values.empty:
                support_resistance["SMA"] = {
                    "current": sma_values.iloc[0],
                    "support": sma_values.min(),
                    "resistance": sma_values.max()
                }

        return support_resistance

    async def _analyze_volatility(self, data: pd.DataFrame) -> Dict[str, Any]:
        """„Éú„É©„ÉÜ„Ç£„É™„ÉÜ„Ç£ÂàÜÊûê"""
        volatility = {}
        
        if "ATR" in data.columns:
            atr_values = data["ATR"].dropna()
            if not atr_values.empty:
                current_atr = atr_values.iloc[0]
                avg_atr = atr_values.mean()
                
                volatility["ATR"] = {
                    "current": current_atr,
                    "average": avg_atr,
                    "level": "È´ò" if current_atr > avg_atr * 1.5 else "‰Ωé" if current_atr < avg_atr * 0.5 else "‰∏≠"
                }

        return volatility

    async def _analyze_momentum(self, data: pd.DataFrame) -> Dict[str, Any]:
        """„É¢„É°„É≥„Çø„É†ÂàÜÊûê"""
        momentum = {}
        
        # RSI„É¢„É°„É≥„Çø„É†
        if "RSI" in data.columns:
            rsi_values = data["RSI"].dropna()
            if len(rsi_values) >= 2:
                rsi_momentum = rsi_values.iloc[0] - rsi_values.iloc[1]
                momentum["RSI"] = {
                    "momentum": rsi_momentum,
                    "direction": "‰∏äÊòá" if rsi_momentum > 0 else "‰∏ãÈôç",
                    "strength": abs(rsi_momentum)
                }

        return momentum

    async def _generate_summary(self, data: pd.DataFrame) -> Dict[str, Any]:
        """Á∑èÂêà„Çµ„Éû„É™„ÉºÁîüÊàê"""
        if data.empty:
            return {"error": "„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì"}

        # ÁèæÂú®„ÅÆ„Ç∑„Ç∞„Éä„É´„ÇíÂèñÂæó
        current_signals = await self._analyze_current_signals(data)
        
        # „Ç∑„Ç∞„Éä„É´„Ç´„Ç¶„É≥„Éà
        buy_signals = len([s for s in current_signals if s.signal_type in [SignalType.BUY, SignalType.STRONG_BUY]])
        sell_signals = len([s for s in current_signals if s.signal_type in [SignalType.SELL, SignalType.STRONG_SELL]])
        
        # Âπ≥Âùá‰ø°È†ºÂ∫¶
        avg_confidence = np.mean([s.confidence for s in current_signals]) if current_signals else 0
        
        # Á∑èÂêàÂà§Êñ≠
        if buy_signals > sell_signals and avg_confidence > 0.6:
            overall_signal = "Ë≤∑„ÅÑ"
        elif sell_signals > buy_signals and avg_confidence > 0.6:
            overall_signal = "Â£≤„Çä"
        else:
            overall_signal = "„Éõ„Éº„É´„Éâ"

        return {
            "overall_signal": overall_signal,
            "buy_signals": buy_signals,
            "sell_signals": sell_signals,
            "avg_confidence": avg_confidence,
            "total_signals": len(current_signals)
        }

    def display_analysis_results(self, results: Dict[str, Any]) -> None:
        """ÂàÜÊûêÁµêÊûú„ÇíË°®Á§∫"""
        if "error" in results:
            console.print(f"‚ùå {results['error']}")
            return

        console.print("\nüéØ È´òÂ∫¶„Å™„Ç∑„Ç∞„Éä„É´ÂàÜÊûêÁµêÊûú")
        console.print("=" * 60)

        # Á∑èÂêà„Çµ„Éû„É™„Éº
        if "summary" in results:
            summary = results["summary"]
            console.print(f"\nüìä Á∑èÂêàÂà§Êñ≠: {summary['overall_signal']}")
            console.print(f"Ë≤∑„ÅÑ„Ç∑„Ç∞„Éä„É´: {summary['buy_signals']}‰ª∂")
            console.print(f"Â£≤„Çä„Ç∑„Ç∞„Éä„É´: {summary['sell_signals']}‰ª∂")
            console.print(f"Âπ≥Âùá‰ø°È†ºÂ∫¶: {summary['avg_confidence']:.2f}")

        # ÁèæÂú®„ÅÆ„Ç∑„Ç∞„Éä„É´
        if "current_signals" in results:
            signals = results["current_signals"]
            if signals:
                console.print("\nüîî ÁèæÂú®„ÅÆ„Ç∑„Ç∞„Éä„É´:")
                for signal in signals:
                    emoji = "üü¢" if signal.signal_type in [SignalType.BUY, SignalType.STRONG_BUY] else "üî¥"
                    console.print(f"  {emoji} {signal.signal_type.value} ({signal.strength.value}) - {signal.reasoning}")
                    console.print(f"     ‰ø°È†ºÂ∫¶: {signal.confidence:.2f}")

        # „Éà„É¨„É≥„ÉâÂàÜÊûê
        if "trend_analysis" in results:
            trends = results["trend_analysis"]
            if trends:
                console.print("\nüìà „Éà„É¨„É≥„ÉâÂàÜÊûê:")
                for indicator, trend in trends.items():
                    if "error" not in trend:
                        console.print(f"  {indicator}: {trend['direction']} (Âº∑Â∫¶: {trend['strength']:.2f})")

        # „Éú„É©„ÉÜ„Ç£„É™„ÉÜ„Ç£ÂàÜÊûê
        if "volatility_analysis" in results:
            volatility = results["volatility_analysis"]
            if volatility:
                console.print("\nüìä „Éú„É©„ÉÜ„Ç£„É™„ÉÜ„Ç£ÂàÜÊûê:")
                for indicator, vol in volatility.items():
                    console.print(f"  {indicator}: {vol['level']} (ÁèæÂú®: {vol['current']:.3f})")

    async def initialize(self) -> bool:
        """ÂàùÊúüÂåñÂá¶ÁêÜ"""
        try:
            self.session = await get_async_session()
            return True
        except Exception as e:
            console.print(f"‚ùå ÂàùÊúüÂåñ„Ç®„É©„Éº: {e}")
            return False

    async def cleanup(self) -> None:
        """„É™„ÇΩ„Éº„Çπ„ÅÆ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó"""
        if self.session:
            await self.session.close()


async def main():
    """„É°„Ç§„É≥ÂÆüË°åÈñ¢Êï∞"""
    import argparse
    
    # „Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥ÂºïÊï∞„ÅÆËß£Êûê
    parser = argparse.ArgumentParser(description="È´òÂ∫¶„Å™„Ç∑„Ç∞„Éä„É´ÂàÜÊûê„Ç∑„Çπ„ÉÜ„É†")
    parser.add_argument("--timeframe", "-tf", default="M5", help="ÊôÇÈñìË∂≥ (M5, H1, H4, D1)")
    parser.add_argument("--days", "-d", type=int, default=7, help="ÂàÜÊûêÊúüÈñìÔºàÊó•Êï∞Ôºâ")
    parser.add_argument("--currency-pair", "-p", default="USD/JPY", help="ÈÄöË≤®„Éö„Ç¢")
    
    args = parser.parse_args()
    
    analyzer = AdvancedSignalAnalyzer(args.currency_pair)
    
    if not await analyzer.initialize():
        return

    try:
        # ÂàÜÊûêÂÆüË°å
        results = await analyzer.analyze_comprehensive_signals(args.timeframe, args.days)
        
        # ÁµêÊûúË°®Á§∫
        analyzer.display_analysis_results(results)

    except Exception as e:
        console.print(f"‚ùå ÂÆüË°å„Ç®„É©„Éº: {e}")
    
    finally:
        await analyzer.cleanup()


if __name__ == "__main__":
    asyncio.run(main())
