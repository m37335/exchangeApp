# Phase 1: 基盤構築計画書
# 期間: 1-2週間
# 目的: プロジェクトの基盤となる構造と設定の構築

phase:
  name: "基盤構築"
  description: "プロジェクトの基盤となる構造、設定、依存関係の構築"
  duration: "1-2週間"
  priority: "Critical"

objectives:
  - "プロジェクト構造の作成"
  - "依存関係の設定"
  - "開発環境の構築"
  - "コード品質管理の設定"

tasks:
  project_structure:
    name: "プロジェクト構造の作成"
    description: "仕様書に基づくディレクトリ構造の作成"
    estimated_hours: 4
    dependencies: []
    deliverables:
      - "src/domain/entities/ 構造"
      - "src/application/use_cases/ 構造"
      - "src/infrastructure/ 構造"
      - "src/utils/ 構造"
    acceptance_criteria:
      - "すべてのディレクトリが作成されている"
      - "__init__.py ファイルが適切に配置されている"
      - "ディレクトリ構造が仕様書と一致している"

  requirements_setup:
    name: "依存関係の設定"
    description: "必要なライブラリとバージョンの設定"
    estimated_hours: 2
    dependencies: ["project_structure"]
    deliverables:
      - "requirements/investpy_calendar.txt"
      - "requirements/base.txt の更新"
    acceptance_criteria:
      - "investpy==1.0.8 が含まれている"
      - "linting ツールが含まれている"
      - "型チェックツールが含まれている"

  development_environment:
    name: "開発環境の構築"
    description: "Docker環境と開発ツールの設定"
    estimated_hours: 6
    dependencies: ["requirements_setup"]
    deliverables:
      - "Dockerfile.investpy"
      - "docker-compose.yml"
      - ".env.example"
      - "scripts/setup_database.py"
    acceptance_criteria:
      - "Dockerコンテナが正常に起動する"
      - "データベース接続が確立される"
      - "開発環境でアプリケーションが動作する"

  code_quality_setup:
    name: "コード品質管理の設定"
    description: "Linting、フォーマティング、型チェックの設定"
    estimated_hours: 4
    dependencies: ["development_environment"]
    deliverables:
      - ".flake8"
      - "pyproject.toml"
      - ".pre-commit-config.yaml"
      - "mypy.ini"
    acceptance_criteria:
      - "black による自動フォーマットが動作する"
      - "flake8 によるスタイルチェックが動作する"
      - "mypy による型チェックが動作する"
      - "pre-commit フックが設定されている"

  configuration_files:
    name: "設定ファイルの作成"
    description: "アプリケーション設定ファイルの作成"
    estimated_hours: 3
    dependencies: ["project_structure"]
    deliverables:
      - "config/investpy_calendar.yaml"
      - "config/notification_rules.yaml"
      - "config/logging.yaml"
    acceptance_criteria:
      - "設定ファイルが仕様書と一致している"
      - "YAML形式が正しい"
      - "環境変数の参照が適切に設定されている"

  logging_setup:
    name: "ログ機能の基盤構築"
    description: "ログ出力とローテーションの設定"
    estimated_hours: 3
    dependencies: ["configuration_files"]
    deliverables:
      - "src/utils/logging/logging_utils.py"
      - "src/utils/logging/log_formatter.py"
      - "src/utils/logging/log_rotator.py"
      - "data/logs/ ディレクトリ構造"
    acceptance_criteria:
      - "ログファイルが適切に出力される"
      - "ログローテーションが動作する"
      - "ログレベルが適切に設定されている"

  exception_handling:
    name: "例外処理の基盤構築"
    description: "カスタム例外クラスとエラーハンドリングの設定"
    estimated_hours: 2
    dependencies: ["project_structure"]
    deliverables:
      - "src/utils/common/exceptions.py"
      - "src/utils/common/constants.py"
    acceptance_criteria:
      - "カスタム例外クラスが定義されている"
      - "エラーコードが適切に設定されている"
      - "例外処理のベストプラクティスに従っている"

  data_directories:
    name: "データディレクトリの作成"
    description: "データ保存用ディレクトリの作成"
    estimated_hours: 1
    dependencies: ["project_structure"]
    deliverables:
      - "data/economic_calendar/raw/"
      - "data/economic_calendar/processed/"
      - "data/economic_calendar/archive/"
      - "data/ai_reports/generated/"
      - "data/ai_reports/templates/"
      - "data/ai_reports/archive/"
    acceptance_criteria:
      - "すべてのディレクトリが作成されている"
      - "適切な権限が設定されている"
      - ".gitkeep ファイルが配置されている"

  documentation_setup:
    name: "ドキュメント基盤の構築"
    description: "プロジェクトドキュメントの初期設定"
    estimated_hours: 2
    dependencies: ["project_structure"]
    deliverables:
      - "docs/README.md"
      - "docs/api_documentation.md"
      - "docs/deployment_guide.md"
      - "docs/troubleshooting.md"
    acceptance_criteria:
      - "ドキュメントが作成されている"
      - "Markdown形式が正しい"
      - "基本的な内容が記載されている"

testing_setup:
  name: "テスト環境の構築"
  description: "テストフレームワークとテスト構造の設定"
  estimated_hours: 3
  dependencies: ["requirements_setup"]
  deliverables:
    - "tests/unit/ 構造"
    - "tests/integration/ 構造"
    - "tests/e2e/ 構造"
    - "pytest.ini"
    - "conftest.py"
  acceptance_criteria:
    - "pytest が正常に動作する"
    - "テストディレクトリ構造が作成されている"
    - "基本的なテスト設定が完了している"

risks:
  - name: "依存関係の競合"
    description: "既存ライブラリとの互換性問題"
    mitigation: "段階的な依存関係の追加とテスト"
    probability: "Medium"
    impact: "Medium"

  - name: "Docker環境の構築失敗"
    description: "Docker環境での動作確認失敗"
    mitigation: "ローカル環境での代替案準備"
    probability: "Low"
    impact: "High"

  - name: "設定ファイルの複雑性"
    description: "設定ファイルの管理が複雑になる"
    mitigation: "段階的な設定とドキュメント整備"
    probability: "Medium"
    impact: "Low"

success_criteria:
  - "プロジェクトが正常にビルドできる"
  - "開発環境でアプリケーションが起動する"
  - "コード品質チェックが正常に動作する"
  - "基本的なログ出力が確認できる"
  - "テスト環境が構築されている"

next_phase: "phase2_domain_entities"
