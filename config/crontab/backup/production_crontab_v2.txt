# Exchange Analytics Production Crontab - v2.0
# 参考: crontab-example.txt からの最適化版
SHELL=/bin/bash
PATH=/usr/local/bin:/usr/bin:/bin
HOME=/app

# .env読み込み関数定義
# ENV_LOAD="export $(cat /app/.env | grep -v '^#' | xargs)"

# 📊 データ取得（15分間隔、平日市場時間 9:00-17:00）
*/15 9-17 * * 1-5 cd /app && export $(cat .env | grep -v '^#' | xargs) && timeout 300 python data_scheduler.py --test >> /app/logs/data_cron.log 2>&1

# 🤖 AI分析・Discord配信（1時間間隔、平日市場時間）
0 */1 9-17 * * 1-5 cd /app && export $(cat .env | grep -v '^#' | xargs) && timeout 120 python real_ai_discord.py USD/JPY >> /app/logs/ai_cron.log 2>&1

# 📈 日次レポート（毎日18:00 JST = 09:00 UTC）
0 9 * * * cd /app && export $(cat .env | grep -v '^#' | xargs) && timeout 60 python -c "
import asyncio
import sys
sys.path.append('/app')
from data_scheduler import DataScheduler
scheduler = DataScheduler()
asyncio.run(scheduler._send_daily_report())
" >> /app/logs/daily_cron.log 2>&1

# 🔍 システムヘルスチェック（30分間隔）
*/30 * * * * cd /app && export $(cat .env | grep -v '^#' | xargs) && timeout 10 python realtime_monitor.py --interval 1 --no-alerts >> /app/logs/health_cron.log 2>&1

# 🌐 APIサーバー稼働確認（10分間隔）
*/10 * * * * timeout 5 curl -s http://localhost:8000/health >> /app/logs/api_health_cron.log 2>&1 || echo "$(date): API down" >> /app/logs/api_health_cron.log

# 📊 週次統計・レポート（毎週月曜日 9:00 JST = 00:00 UTC）
0 0 * * 1 cd /app && export $(cat .env | grep -v '^#' | xargs) && python -c "
import subprocess
import json
import asyncio
from datetime import datetime
import pytz

async def weekly_report():
    try:
        jst = pytz.timezone('Asia/Tokyo')
        current_time = datetime.now(jst)
        print(f'Weekly stats: {current_time.strftime(\"%Y-%m-%d %H:%M:%S JST\")}')

        # Alpha Vantage接続テスト
        result = subprocess.run(['python', 'test_alphavantage.py', '--test', 'connection'],
                              capture_output=True, text=True, cwd='/app')
        av_status = result.returncode == 0

        # 環境変数テスト
        env_result = subprocess.run(['python', 'test_env_loading.py'],
                                  capture_output=True, text=True, cwd='/app')
        env_status = env_result.returncode == 0

        print(f'Alpha Vantage test: {av_status}')
        print(f'Environment loading: {env_status}')

        # Discord週次レポート送信
        import os
        webhook_url = os.getenv('DISCORD_WEBHOOK_URL')
        if webhook_url:
            import httpx
            message = {
                'content': '📊 **週次システムレポート**',
                'embeds': [{
                    'title': '📈 Weekly System Report',
                    'description': 'Exchange Analytics システム週次統計',
                    'color': 0x0099FF,
                    'fields': [
                        {'name': '⏰ 時刻', 'value': current_time.strftime('%Y-%m-%d %H:%M:%S JST'), 'inline': True},
                        {'name': '🔑 Alpha Vantage', 'value': '✅ 正常' if av_status else '❌ エラー', 'inline': True},
                        {'name': '🔧 環境変数', 'value': '✅ 正常' if env_status else '❌ エラー', 'inline': True}
                    ],
                    'footer': {'text': 'Weekly System Monitor'}
                }]
            }

            async with httpx.AsyncClient(timeout=5.0) as client:
                await client.post(webhook_url, json=message)
            print('Discord週次レポート送信完了')

    except Exception as e:
        print(f'Weekly stats error: {e}')

asyncio.run(weekly_report())
" >> /app/logs/weekly_cron.log 2>&1

# 🗑️ ログローテーション（毎日2:00 JST = 17:00 UTC）
0 17 * * * cd /app/logs && find . -name "*.log" -size +10M -exec gzip {} \; && find . -name "*.gz" -mtime +7 -delete >> /app/logs/cleanup.log 2>&1

# 🔍 エラーログ監視（5分間隔）
*/5 * * * * [ -f /app/logs/data_scheduler.log ] && tail -10 /app/logs/data_scheduler.log | grep -i "error\|failed" && echo "$(date): Errors detected" >> /app/logs/error_alert.log

# 🧪 環境変数テスト（10分間隔、デバッグ用）
*/10 * * * * cd /app && export $(cat .env | grep -v '^#' | xargs) && timeout 30 python test_env_loading.py >> /app/logs/env_test_cron.log 2>&1
