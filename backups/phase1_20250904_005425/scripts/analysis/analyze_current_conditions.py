#!/usr/bin/env python3
"""
ÁèæÂú®„ÅÆÊù°‰ª∂ÂàÜÊûê„Çπ„ÇØ„É™„Éó„Éà

„Å™„Åú„Ç∑„Ç∞„Éä„É´„ÅåÁîüÊàê„Åï„Çå„Å™„ÅÑ„ÅÆ„Åã„ÇíË©≥„Åó„ÅèÂàÜÊûê„Åó„Åæ„Åô
"""

import asyncio
import os
import sys
from pathlib import Path

# „Éó„É≠„Ç∏„Çß„ÇØ„Éà„É´„Éº„Éà„Çí„Éë„Çπ„Å´ËøΩÂä†
sys.path.insert(0, str(Path(__file__).parent))

# Áí∞Â¢ÉÂ§âÊï∞„ÇíË™≠„ÅøËæº„Åø
from dotenv import load_dotenv
from sqlalchemy import text

load_dotenv()


async def analyze_current_conditions():
    """ÁèæÂú®„ÅÆÊù°‰ª∂„ÇíË©≥„Åó„ÅèÂàÜÊûê"""
    print("=" * 80)
    print("üîç ÁèæÂú®„ÅÆÊù°‰ª∂Ë©≥Á¥∞ÂàÜÊûê")
    print("=" * 80)

    # „Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂ö
    from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
    from sqlalchemy.orm import sessionmaker

    database_url = os.getenv("DATABASE_URL")
    engine = create_async_engine(database_url, echo=False)
    async_session = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)

    try:
        async with async_session() as db_session:
            print("\nüîç 1. ÊúÄÊñ∞„Éá„Éº„Çø„ÅÆË©≥Á¥∞ÂàÜÊûê...")
            
            # ÊúÄÊñ∞„ÅÆ„Éá„Éº„Çø„ÇíÂèñÂæó
            result = await db_session.execute(
                text(
                    """
                    SELECT 
                        ti1.value as rsi_value,
                        ti2.value as sma_value,
                        ti3.value as ema_12,
                        ti4.value as ema_26,
                        pd.close_price as current_price,
                        ti1.timestamp,
                        ti1.timeframe
                    FROM technical_indicators ti1
                    LEFT JOIN technical_indicators ti2 ON 
                        ti1.timestamp = ti2.timestamp 
                        AND ti1.timeframe = ti2.timeframe 
                        AND ti2.indicator_type = 'SMA_20'
                    LEFT JOIN technical_indicators ti3 ON 
                        ti1.timestamp = ti3.timestamp 
                        AND ti1.timeframe = ti3.timeframe 
                        AND ti3.indicator_type = 'EMA_12'
                    LEFT JOIN technical_indicators ti4 ON 
                        ti1.timestamp = ti4.timestamp 
                        AND ti1.timeframe = ti4.timeframe 
                        AND ti4.indicator_type = 'EMA_26'
                    LEFT JOIN price_data pd ON 
                        ti1.timestamp = pd.timestamp
                        AND ti1.currency_pair = pd.currency_pair
                    WHERE ti1.indicator_type = 'RSI'
                    AND ti1.timestamp >= NOW() - INTERVAL '7 days'
                    ORDER BY ti1.timestamp DESC
                    LIMIT 5
                    """
                )
            )
            latest_data = result.fetchall()
            
            print(f"‚úÖ ÊúÄÊñ∞„Éá„Éº„Çø: {len(latest_data)}‰ª∂")
            for rsi, sma, ema_12, ema_26, price, timestamp, timeframe in latest_data:
                if rsi and sma and ema_12 and ema_26 and price:
                    print(f"\nüìä {timeframe} - {timestamp}")
                    print(f"   RSI: {rsi:.2f}")
                    print(f"   ‰æ°Ê†º: {price:.5f}")
                    print(f"   SMA20: {sma:.5f}")
                    print(f"   EMA12: {ema_12:.5f}")
                    print(f"   EMA26: {ema_26:.5f}")
                    
                    # Êù°‰ª∂„ÉÅ„Çß„ÉÉ„ÇØ
                    print(f"\n   üîç Êù°‰ª∂„ÉÅ„Çß„ÉÉ„ÇØ:")
                    
                    # Ë≤∑„ÅÑÊù°‰ª∂
                    rsi_buy = rsi < 35
                    price_buy = price > sma
                    ema_buy = ema_12 > ema_26
                    
                    print(f"   Ë≤∑„ÅÑÊù°‰ª∂:")
                    print(f"     RSI < 35: {rsi:.2f} < 35 = {rsi_buy}")
                    print(f"     ‰æ°Ê†º > SMA20: {price:.5f} > {sma:.5f} = {price_buy}")
                    print(f"     EMA12 > EMA26: {ema_12:.5f} > {ema_26:.5f} = {ema_buy}")
                    
                    buy_signal = rsi_buy and price_buy and ema_buy
                    print(f"     Ë≤∑„ÅÑ„Ç∑„Ç∞„Éä„É´: {buy_signal}")
                    
                    # Â£≤„ÇäÊù°‰ª∂
                    rsi_sell = rsi > 65
                    price_sell = price < sma
                    ema_sell = ema_12 < ema_26
                    
                    print(f"   Â£≤„ÇäÊù°‰ª∂:")
                    print(f"     RSI > 65: {rsi:.2f} > 65 = {rsi_sell}")
                    print(f"     ‰æ°Ê†º < SMA20: {price:.5f} < {sma:.5f} = {price_sell}")
                    print(f"     EMA12 < EMA26: {ema_12:.5f} < {ema_26:.5f} = {ema_sell}")
                    
                    sell_signal = rsi_sell and price_sell and ema_sell
                    print(f"     Â£≤„Çä„Ç∑„Ç∞„Éä„É´: {sell_signal}")

            print("\nüîç 2. ÈÅéÂéª„ÅÆ„Ç∑„Ç∞„Éä„É´ÁîüÊàêÂèØËÉΩÊÄß„Çí„ÉÅ„Çß„ÉÉ„ÇØ...")
            
            # ÈÅéÂéª30Êó•Èñì„Åß„Ç∑„Ç∞„Éä„É´„ÅåÁîüÊàê„Åï„Çå„ÇãÂèØËÉΩÊÄß„Åå„ÅÇ„Å£„Åü„Éá„Éº„Çø„Çí„ÉÅ„Çß„ÉÉ„ÇØ
            result = await db_session.execute(
                text(
                    """
                    SELECT 
                        ti1.value as rsi_value,
                        ti2.value as sma_value,
                        ti3.value as ema_12,
                        ti4.value as ema_26,
                        pd.close_price as current_price,
                        ti1.timestamp,
                        ti1.timeframe
                    FROM technical_indicators ti1
                    LEFT JOIN technical_indicators ti2 ON 
                        ti1.timestamp = ti2.timestamp 
                        AND ti1.timeframe = ti2.timeframe 
                        AND ti2.indicator_type = 'SMA_20'
                    LEFT JOIN technical_indicators ti3 ON 
                        ti1.timestamp = ti3.timestamp 
                        AND ti1.timeframe = ti3.timeframe 
                        AND ti3.indicator_type = 'EMA_12'
                    LEFT JOIN technical_indicators ti4 ON 
                        ti1.timestamp = ti4.timestamp 
                        AND ti1.timeframe = ti4.timeframe 
                        AND ti4.indicator_type = 'EMA_26'
                    LEFT JOIN price_data pd ON 
                        ti1.timestamp = pd.timestamp
                        AND ti1.currency_pair = pd.currency_pair
                    WHERE ti1.indicator_type = 'RSI'
                    AND ti1.timestamp >= NOW() - INTERVAL '30 days'
                    AND (
                        (ti1.value < 35 AND pd.close_price > ti2.value AND ti3.value > ti4.value) OR
                        (ti1.value > 65 AND pd.close_price < ti2.value AND ti3.value < ti4.value)
                    )
                    ORDER BY ti1.timestamp DESC
                    LIMIT 10
                    """
                )
            )
            potential_signals = result.fetchall()
            
            print(f"‚úÖ ÈÅéÂéª30Êó•Èñì„Åß„Ç∑„Ç∞„Éä„É´ÁîüÊàêÂèØËÉΩÊÄß: {len(potential_signals)}‰ª∂")
            for rsi, sma, ema_12, ema_26, price, timestamp, timeframe in potential_signals:
                if rsi and sma and ema_12 and ema_26 and price:
                    buy_condition = rsi < 35 and price > sma and ema_12 > ema_26
                    sell_condition = rsi > 65 and price < sma and ema_12 < ema_26
                    
                    signal_type = "BUY" if buy_condition else "SELL" if sell_condition else "NONE"
                    print(f"  üìä {timeframe} - {timestamp}: {signal_type} (RSI={rsi:.2f})")

            print("\nüîç 3. Êù°‰ª∂„Çí„Åï„Çâ„Å´Á∑©Âíå„Åó„Åü„ÉÜ„Çπ„Éà...")
            
            # Êù°‰ª∂„Çí„Åï„Çâ„Å´Á∑©Âíå„Åó„Å¶„ÉÜ„Çπ„Éà
            print("‚úÖ „Åï„Çâ„Å´Á∑©Âíå„Åó„ÅüÊù°‰ª∂„ÉÜ„Çπ„Éà:")
            print("   Ë≤∑„ÅÑ: RSI < 40 + ‰æ°Ê†º > SMA20 + EMA12 > EMA26")
            print("   Â£≤„Çä: RSI > 60 + ‰æ°Ê†º < SMA20 + EMA12 < EMA26")
            
            result = await db_session.execute(
                text(
                    """
                    SELECT 
                        ti1.value as rsi_value,
                        ti2.value as sma_value,
                        ti3.value as ema_12,
                        ti4.value as ema_26,
                        pd.close_price as current_price,
                        ti1.timestamp,
                        ti1.timeframe
                    FROM technical_indicators ti1
                    LEFT JOIN technical_indicators ti2 ON 
                        ti1.timestamp = ti2.timestamp 
                        AND ti1.timeframe = ti2.timeframe 
                        AND ti2.indicator_type = 'SMA_20'
                    LEFT JOIN technical_indicators ti3 ON 
                        ti1.timestamp = ti3.timestamp 
                        AND ti1.timeframe = ti3.timeframe 
                        AND ti3.indicator_type = 'EMA_12'
                    LEFT JOIN technical_indicators ti4 ON 
                        ti1.timestamp = ti4.timestamp 
                        AND ti1.timeframe = ti4.timeframe 
                        AND ti4.indicator_type = 'EMA_26'
                    LEFT JOIN price_data pd ON 
                        ti1.timestamp = pd.timestamp
                        AND ti1.currency_pair = pd.currency_pair
                    WHERE ti1.indicator_type = 'RSI'
                    AND ti1.timestamp >= NOW() - INTERVAL '7 days'
                    AND (
                        (ti1.value < 40 AND pd.close_price > ti2.value AND ti3.value > ti4.value) OR
                        (ti1.value > 60 AND pd.close_price < ti2.value AND ti3.value < ti4.value)
                    )
                    ORDER BY ti1.timestamp DESC
                    LIMIT 5
                    """
                )
            )
            more_relaxed_signals = result.fetchall()
            
            print(f"‚úÖ „Åï„Çâ„Å´Á∑©Âíå„Åó„ÅüÊù°‰ª∂„Åß„ÅÆ„Ç∑„Ç∞„Éä„É´: {len(more_relaxed_signals)}‰ª∂")
            for rsi, sma, ema_12, ema_26, price, timestamp, timeframe in more_relaxed_signals:
                if rsi and sma and ema_12 and ema_26 and price:
                    buy_condition = rsi < 40 and price > sma and ema_12 > ema_26
                    sell_condition = rsi > 60 and price < sma and ema_12 < ema_26
                    
                    signal_type = "BUY" if buy_condition else "SELL" if sell_condition else "NONE"
                    print(f"  üìä {timeframe} - {timestamp}: {signal_type} (RSI={rsi:.2f})")

            print("\nüéØ 4. Êé®Â•®„Ç¢„ÇØ„Ç∑„Éß„É≥...")
            
            if len(potential_signals) == 0:
                print("‚ùå ÈÅéÂéª30Êó•Èñì„Åß„Ç∑„Ç∞„Éä„É´ÁîüÊàêÂèØËÉΩÊÄß„Å™„Åó")
                print("üí° Êé®Â•®„Ç¢„ÇØ„Ç∑„Éß„É≥:")
                print("   1. Êù°‰ª∂„Çí„Åï„Çâ„Å´Á∑©Âíå„Åô„ÇãÔºàRSI < 40 / RSI > 60Ôºâ")
                print("   2. ‰ªñ„ÅÆÊ§úÂá∫Âô®Ôºà„Éú„É™„É≥„Ç∏„É£„Éº„Éê„É≥„ÉâÔºâ„Çí„ÉÜ„Çπ„Éà„Åô„Çã")
                print("   3. „Çà„ÇäÈï∑ÊúüÈñì„ÅÆ„Éá„Éº„Çø„Åß„ÉÜ„Çπ„Éà„Åô„Çã")
            else:
                print(f"‚úÖ ÈÅéÂéª30Êó•Èñì„Åß{len(potential_signals)}‰ª∂„ÅÆ„Ç∑„Ç∞„Éä„É´ÁîüÊàêÂèØËÉΩÊÄß„ÅÇ„Çä")
                print("üí° „Ç∑„Çπ„ÉÜ„É†„ÅØÊ≠£Â∏∏„Å´Âãï‰Ωú„Åó„Å¶„ÅÑ„Åæ„Åô")

    except Exception as e:
        print(f"‚ùå „Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: {e}")
        import traceback

        traceback.print_exc()

    finally:
        if engine:
            await engine.dispose()


if __name__ == "__main__":
    asyncio.run(analyze_current_conditions())
