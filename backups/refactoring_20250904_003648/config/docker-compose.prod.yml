version: '3.8'

services:
  # PostgreSQL データベース
  postgres:
    image: postgres:15-alpine
    container_name: forex_alert_postgres
    environment:
      POSTGRES_DB: forex_alert_db
      POSTGRES_USER: forex_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - forex_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U forex_user -d forex_alert_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis キャッシュ
  redis:
    image: redis:7-alpine
    container_name: forex_alert_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - forex_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # アラートシステム API
  api:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: forex_alert_api
    environment:
      - DATABASE_URL=postgresql://forex_user:${POSTGRES_PASSWORD}@postgres:5432/forex_alert_db
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL}
      - EMAIL_SMTP_HOST=${EMAIL_SMTP_HOST}
      - EMAIL_SMTP_PORT=${EMAIL_SMTP_PORT}
      - EMAIL_USERNAME=${EMAIL_USERNAME}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config
    ports:
      - "8000:8000"
    networks:
      - forex_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # バックグラウンドワーカー
  worker:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: forex_alert_worker
    command: ["python", "-m", "src.workers.main"]
    environment:
      - DATABASE_URL=postgresql://forex_user:${POSTGRES_PASSWORD}@postgres:5432/forex_alert_db
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL}
      - EMAIL_SMTP_HOST=${EMAIL_SMTP_HOST}
      - EMAIL_SMTP_PORT=${EMAIL_SMTP_PORT}
      - EMAIL_USERNAME=${EMAIL_USERNAME}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config
    networks:
      - forex_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # スケジューラー
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: forex_alert_scheduler
    command: ["python", "-m", "src.scheduler.main"]
    environment:
      - DATABASE_URL=postgresql://forex_user:${POSTGRES_PASSWORD}@postgres:5432/forex_alert_db
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config
    networks:
      - forex_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Nginx リバースプロキシ
  nginx:
    image: nginx:alpine
    container_name: forex_alert_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - forex_network
    depends_on:
      - api
    restart: unless-stopped

  # 監視・ログ収集
  monitoring:
    image: grafana/grafana:latest
    container_name: forex_alert_monitoring
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    networks:
      - forex_network
    restart: unless-stopped

  # Prometheus メトリクス収集
  prometheus:
    image: prom/prometheus:latest
    container_name: forex_alert_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - forex_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  forex_network:
    driver: bridge
